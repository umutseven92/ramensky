var searchIndex = JSON.parse('{\
"lib":{"doc":"Ramensky","t":"AAAAAAILKAADLLLLLLLLLLDLLLLLLLLLLENNNLLLLLLLNENLLLLLLLAAADLLLLLLMMMLLLDLLLLLLLLLLDLLLLLLLLL","n":["adaptor","safe_cracker","base","custom","field_type","safe_crack_result","BaseAdaptor","get_adaptor_name","try_password","test_adaptor","zip_adaptor","TestAdaptor","borrow","borrow_mut","from","get_adaptor_name","into","new","try_from","try_into","try_password","type_id","ZipAdaptor","borrow","borrow_mut","from","get_adaptor_name","into","new","try_from","try_into","try_password","type_id","FieldType","Float","Int","String","borrow","borrow_mut","from","into","try_from","try_into","type_id","Failure","SafeCrackResult","Success","borrow","borrow_mut","from","into","try_from","try_into","type_id","options","password_reader","safe_cracker","Options","borrow","borrow_mut","default","from","into","new","quiet","try_brute_forcing","try_common_passwords","try_from","try_into","type_id","PasswordReader","borrow","borrow_mut","build","from","into","into_iter","next","try_from","try_into","type_id","SafeCracker","borrow","borrow_mut","build","from","into","start","try_from","try_into","type_id"],"q":[[0,"lib"],[2,"lib::adaptor"],[6,"lib::adaptor::base"],[9,"lib::adaptor::custom"],[11,"lib::adaptor::custom::test_adaptor"],[22,"lib::adaptor::custom::zip_adaptor"],[33,"lib::adaptor::field_type"],[44,"lib::adaptor::safe_crack_result"],[54,"lib::safe_cracker"],[57,"lib::safe_cracker::options"],[70,"lib::safe_cracker::password_reader"],[81,"lib::safe_cracker::safe_cracker"]],"d":["","","","This module contains custom adaptors for various purposes.","","","","","","TestAdaptor is a simple adaptor for testing and …","ZipAdaptor is an adaptor for decrypting password protected …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Module containing the options that configure Ramensky, to …","Module containing the iterator that reads from provided …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","If <code>quiet</code> is true, then intermediate information will not …","Whether to try to brute force the password. This will run …","Whether to try the most common 10M passwords. This will be …","","","","<code>PasswordReader</code> is an iterator that spits out a password …","","","Build a <code>PasswordReader</code> from the provided password file …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,16,16,0,0,0,7,7,7,7,7,7,7,7,7,7,0,9,9,9,9,9,9,9,9,9,9,0,17,17,17,17,17,17,17,17,17,17,3,0,3,3,3,3,3,3,3,3,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,0,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,[[],1],[2,[[6,[3,[5,[4]]]]]],0,0,0,[[]],[[]],[[]],[7,1],[[]],[1,7],[[],6],[[],6],[[7,2],[[6,[3,[5,[4]]]]]],[[],8],0,[[]],[[]],[[]],[9,1],[[]],[[1,1],9],[[],6],[[],6],[[9,2],[[6,[3,[5,[4]]]]]],[[],8],0,0,0,0,[[]],[[]],[[]],[[]],[[],6],[[],6],[[],8],0,0,0,[[]],[[]],[[]],[[]],[[],6],[[],6],[[],8],0,0,0,0,[[]],[[]],[[],10],[[]],[[]],[[11,11,11,11,[12,[1]]],10],0,0,0,[[],6],[[],6],[[],8],0,[[]],[[]],[[[13,[1]]],[[6,[14,[5,[4]]]]]],[[]],[[]],[[]],[14,12],[[],6],[[],6],[[],8],0,[[]],[[]],[10,[[6,[15,[5,[4]]]]]],[[]],[[]],[[15,16],[[6,[3,[5,[4]]]]]],[[],6],[[],6],[[],8]],"c":[],"p":[[15,"str"],[3,"String"],[4,"SafeCrackResult"],[8,"Error"],[3,"Box"],[4,"Result"],[3,"TestAdaptor"],[3,"TypeId"],[3,"ZipAdaptor"],[3,"Options"],[15,"bool"],[4,"Option"],[3,"Vec"],[3,"PasswordReader"],[3,"SafeCracker"],[8,"BaseAdaptor"],[4,"FieldType"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
